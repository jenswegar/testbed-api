openapi: 3.0.3

# Info section
info:
  title: Testbed API
  version: '1.0.0'
  description: API for Testbed project.
  x-logo:
    url: ''
  license:
    name: MIT
    url: 'https://opensource.org/licenses/MIT'
  contact:
    name: Jens Wegar
    email: jens.wegar@gmail.com

# Servers section
servers: []

# Paths section
paths:
  /:
    summary: Returns public metadata about the API
    get:
      tags:
      - App metadata
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppMetadata'
      operationId: appMetadata

# Questions
  /questions:
    summary: 'Handle quiz questions'
    get:
      tags:
      - Questions
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                minItems: 0
                items:
                  $ref: '#/components/schemas/Question'
          description: successful operation
      operationId: getQuestions
      summary: ''
      description: Return list of questions.
    post:
      tags:
      - Questions
      requestBody:
        $ref: '#/components/requestBodies/CreateQuestion'
      responses:
        '201':
          content:
            application/json:
              encoding: {}
              schema:
                $ref: '#/components/schemas/Question'
          description: Created
      operationId: postQuestion
      description: Add new question.

  '/questions/{questionId}':
    get:
      tags:
      - Questions
      operationId: getQuestion
      parameters:
        - $ref: '#/components/parameters/QuestionId'
      responses:
        '200':
          description: The question
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Question'
    delete:
      tags:
      - Questions
      operationId: deleteQuestion
      parameters:
        - name: questionId
          in: path
          example: ''
          required: true
          deprecated: false
          description: The numeric id of the question to delete
          schema:
            example: ''
            type: integer
            format: ''
            pattern: ''
      responses:
        '200':
          description: successful operation
    patch:
      tags:
      - Questions
      operationId: updateQuestion
      description: Updates a question with new data
      parameters:
        - name: questionId
          in: path
          example: ''
          required: true
          deprecated: false
          description: The numeric id of the question
          schema:
            example: '123'
            type: integer
            format: int64
            pattern: ''
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Question'
      responses:
        '200':
          description: The updated question
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Question'

  /questions/random:
    get:
      tags:
      - Questions
      operationId: getRandomQuestion
      parameters: []
      responses:
        '200':
          description: A random question
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Question'

# Components section
components:

  requestBodies:
    CreateQuestion:
      description: Create a new question
      required: true
      content:
        application/json:
          schema:
            properties:
              answerOptions:
                type: array
                items:
                  allOf:
                    - $ref: '#/components/schemas/AnswerOptionProperties'
                    - $ref: '#/components/schemas/AnswerOptionRequiredProperties'
            allOf:
              - $ref: '#/components/schemas/QuestionProperties'
              - $ref: '#/components/schemas/QuestionRequiredProperties'
    CreateAnswerOption:
      description: Create a new answer option
      required: true
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/AnswerOptionProperties'
              - $ref: '#/components/schemas/AnswerOptionRequiredProperties'

  parameters:
    QuestionId:
      name: questionId
      in: path
      required: true
      schema:
        $ref: '#/components/schemas/Id'

    AnswerOptionId:
      name: answerOptionId
      in: path
      required: true
      schema:
        $ref: '#/components/schemas/Id'

  schemas:

    AppMetadata:
      type: object
      description: Represents basic metadata about the API.
      properties:
        name:
          description: 'The name of the API implementation'
          type: string
          example: "testbed-java-spring-boot"
        version:
          description: >-
            The version of the API implementation. Should follow SemVer
            standard.
          type: string
          example: "1.2.3"
        hostname:
          description: The hostname that this instance of the API is running on.
          type: string
          example: "somehostname"

    Id:
      description: A unique identifier for this entity
      type: integer
      format: int64
      example: 1234

    Question:
      properties:
        answerOptions:
          type: array
          items:
            $ref: '#/components/schemas/AnswerOption'
      allOf:
        - $ref: '#/components/schemas/QuestionId'
        - $ref: '#/components/schemas/QuestionProperties'
        - $ref: '#/components/schemas/QuestionRequiredProperties'

    QuestionId:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/Id'

    QuestionProperties:
      type: object
      properties:
        text:
          description: The text of the question to ask
          type: string
          example: "What is the size of the universe?"

    QuestionRequiredProperties:
      type: object
      required:
        - text

    AnswerOptionId:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/Id'

    AnswerOptionProperties:
      type: object
      properties:
        text:
          description: The text describing the answer option
          type: string
          example: "Super duper small."
        isCorrect:
          description: Marks if this is a correct answer to the referenced question or not.
          type: boolean
          example: false

    AnswerOptionRequiredProperties:
      type: object
      required:
        - text
        - isCorrect

    AnswerOption:
      description: Represents a single answer option to a question.
      properties:
        questionId:
          $ref: '#/components/schemas/Id'
      allOf:
        - $ref: '#/components/schemas/AnswerOptionId'
        - $ref: '#/components/schemas/AnswerOptionProperties'
        - $ref: '#/components/schemas/AnswerOptionRequiredProperties'

# Security schemes section
  securitySchemes: {}

# Responses section
  responses: {}
tags: []
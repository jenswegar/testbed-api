openapi: 3.0.3

# Info section
info:
  title: Testbed API
  version: '1.0.0'
  description: API for Testbed project.
  x-logo:
    url: ''
  license:
    name: MIT
    url: 'https://opensource.org/licenses/MIT'
  contact:
    name: Jens Wegar
    email: jens.wegar@gmail.com

# Servers section
servers:
  - url: http://localhost:8080
    description: Local development server

# Paths section
paths:
  /:
    summary: Returns public metadata about the API
    get:
      tags:
      - App metadata
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppMetadata'
      operationId: appMetadata

  /questions:
    summary: Handles quiz questions
    get:
      operationId: getQuestions
      tags:
        - Questions
      responses:
        '200':
          description: Return list of questions
          content:
            application/json:
              schema:
                type: array
                minItems: 0
                items:
                  $ref: '#/components/schemas/Question'
    post:
      operationId: createQuestion
      tags:
        - Questions
      requestBody:
        description: Create a new question
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QuestionRequest'
      responses:
        '201':
           description: Created
           content:
             application/json:
               schema:
                 $ref: '#/components/schemas/Question'

  /questions/{id}:
    parameters:
      - $ref: '#/components/parameters/PathId'

    get:
      operationId: getQuestion
      tags:
        - Questions
      responses:
        '200':
           description: Updated
           content:
             application/json:
               schema:
                 $ref: '#/components/schemas/Question'

    put:
      operationId: updateQuestion
      tags:
        - Questions
      requestBody:
        description: Update an existing question
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QuestionRequest'
      responses:
        '200':
           description: Updated
           content:
             application/json:
               schema:
                 $ref: '#/components/schemas/Question'

    delete:
      operationId: deleteQuestion
      tags:
        - Questions
      responses:
        '204':
           description: Deleted

  /questions/random:
    get:
      operationId: getRandomQuestion
      tags:
        - Questions
      responses:
        '200':
           description: Return a random question
           content:
             application/json:
               schema:
                 $ref: '#/components/schemas/Question'

components:

  # convention:
  # - *Request components define properties for POST requests
  # - *ReadOnly components define properties that may be part of
  #   some requests, but are not modifiable by the request.

  parameters:
    PathId:
      name: id
      in: path
      required: true
      schema:
        $ref: '#/components/schemas/Id'

  schemas:
    # Common properties
    Id:
      description: A unique identifier for this entity
      type: integer
      format: int64
      example: 1234
      minimum: 1

    Created:
      description: The date/time when the entity was created
      type: string
      format: date-time
      example: 2020-03-20T09:12:28Z

    Modified:
      description: The date/time when the entity was last modified
      type: string
      format: date-time
      example: 2020-03-20T15:12:28Z

    # Question related schemas
    QuestionRequest:
      required:
        - "text"
      properties:
        text:
          description: The text of the question to ask
          type: string
          minLength: 1
          example: What is the size of the universe?

    QuestionReadOnly:
      properties:
        id:
          $ref: '#/components/schemas/Id'
        created:
          $ref: '#/components/schemas/Created'
        modified:
          $ref: '#/components/schemas/Modified'

    Question:
      allOf:
        - $ref: '#/components/schemas/QuestionReadOnly'
        - $ref: '#/components/schemas/QuestionRequest'


    AppMetadata:
      type: object
      description: Represents basic metadata about the API.
      properties:
        name:
          description: 'The name of the API implementation'
          type: string
          example: "testbed-java-spring-boot"
        version:
          description: >-
            The version of the API implementation. Should follow SemVer
            standard.
          type: string
          example: "1.2.3"
        hostname:
          description: The hostname that this instance of the API is running on.
          type: string
          example: "somehostname"

# Security schemes section
  securitySchemes: {}

# Responses section
  responses: {}

tags: []